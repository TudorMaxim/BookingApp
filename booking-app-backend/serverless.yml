service: booking-app-backend
frameworkVersion: '2'
useDotenv: true

plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-2
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - ses:*
        - dynamodb:*
        - s3:*
      Resource: '*'
  apiGateway:
    shouldStartNameWithService: true
  
  environment:
    REGION: ${self:provider.region}
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}-table
    USERS_EMAIL_INDEX: ${self:provider.environment.DYNAMODB_TABLE}-email-index
    S3_IMAGES_BUCKET_NAME: ${self:service}-${self:provider.stage}-images-bucket
    BOOKING_USERS_INDEX: ${self:provider.environment.DYNAMODB_TABLE}-booking-users-index

functions:
  authorize: 
    handler: src/lambdas/auth/authorizer.handler

  register:
    handler: src/lambdas/auth/register.handler
    events:
      - http:
          path: /api/register
          method: POST
          cors: true
  
  login:
    handler: src/lambdas/auth/login.handler
    events:
      - http:
          path: /api/login
          method: POST
          cors: true

  activate:
    handler: src/lambdas/auth/activate.handler
    events:
      - http:
          path: /api/activate
          method: POST
          cors: true
  
  updateProfile:
    handler: src/lambdas/profile/update.handler
    events:
      - http:
          path: /api/profile
          method: POST
          cors: true
          authorizer: authorize
  
  getProfile:
    handler: src/lambdas/profile/get.handler
    events:
      - http:
          path: /api/users
          method: GET
          cors: true
          authorizer: authorize

resources:
  - ${file(./resources/dynamodb.yml)}
  - ${file(./resources/authorizer_cors.yml)}
  - ${file(./resources/s3_images_bucket.yml)}
                
